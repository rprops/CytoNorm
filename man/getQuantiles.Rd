% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/QuantileNorm.R
\name{getQuantiles}
\alias{getQuantiles}
\title{getQuantiles}
\usage{
getQuantiles(
  files,
  channels,
  nQ = 99,
  minCells = 50,
  quantileValues = NULL,
  transformList = NULL,
  labels = NULL,
  selection = NULL,
  verbose = FALSE,
  plot = FALSE,
  ...
)
}
\arguments{
\item{files}{Full paths of the fcs files of the samples or alternatively
a flowSet.}

\item{channels}{Names of the channels to compute the quantiles for}

\item{nQ}{Number of quantiles to compute Default = 99, which
results in quantiles for every percent of the data.
Ignored if quantileValues is given.}

\item{minCells}{Minimum number of cells required to compute trust-worthy
quantiles. Otherwise NA is returned. Default = 50.}

\item{quantileValues}{Vector of length with values between 0 and 1, giving
the percentages at which the quantiles should be
computed. If NULL (default), the quantiles will be
evenly distributed, including 0 and 1.}

\item{transformList}{Transformation list to pass to the flowCore
\code{transform} function}

\item{labels}{A label for every file, indicating to which group it
belongs. If multiple files have the same label, they
get aggregated. If NULL, all files are handled separately.}

\item{selection}{List with indexation vector for every file.}

\item{verbose}{If TRUE, extra output is printed. Default = FALSE}

\item{plot}{If TRUE, plots are generated showing all quantiles.
Default = FALSE.}

\item{...}{Additional arguments to pass to read.FCS}
}
\description{
getQuantiles
}
\examples{
dir <- system.file("extdata", package = "CytoNorm")
files <- list.files(dir, pattern = "fcs$")

ff <- flowCore::read.flowSet(file.path(dir, files))
channels <- grep("Di$", flowCore::colnames(ff), value = TRUE)
transformList <- flowCore::transformList(channels,
                                         cytofTransform)

# Execute via file path
quantiles <- getQuantiles(files = file.path(dir, files),
                          channels = channels,
                          transformList = transformList)
                          
# Execute directly on flowSet or flowframe
quantiles <- getQuantiles(files = ff,
                          channels = channels,
                          transformList = transformList)

pheatmap::pheatmap(quantiles[[1]],
                   cluster_rows = FALSE,
                   cluster_cols = FALSE,
                   labels_col =
                     paste0(FlowSOM::GetMarkers(ff, colnames(quantiles[[1]])),
                            " (", colnames(quantiles[[1]]), ")"),
                   main = files[1])

}
